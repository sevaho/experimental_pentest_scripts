#! /usr/bin/python

# -----------------------------------------------------------------------------------------------------------------------------
# GENERAL
# -----------------------------------------------------------------------------------------------------------------------------
#
# author: Sebastiaan Van Hoecke
# mail: sebastiaan@sevaho.io
#
# NOTE:
#
# -----------------------------------------------------------------------------------------------------------------------------

import sys
import socket
import getopt
import threading
import subprocess
import traceback
import logging

# -----------------------------------------------------------------------------------------------------------------------------
# GLOBAL VARIABLES
# -----------------------------------------------------------------------------------------------------------------------------

listen      = False
command     = False
upload      = False
execute     = ""
target      = ""
upload_dest = ""
port        = 0

# -----------------------------------------------------------------------------------------------------------------------------
# FUNCTIONS
# -----------------------------------------------------------------------------------------------------------------------------


def usage ():

    print("Usage: %s [OPTIONS]... [ARGS]... \
            \n \
            \n  description\
            \n \
            \nOPTIONS:\
            \n \
            \n  -h, *           display the help and exit\
            \n  -l, --listen    listen on host:port\
            \n  -e, --execute   execute file\
            \n  -c, --command   initialize a command shell \
            \n  -u, --upload    upon receiving conn, upload file and write \
            \n \
            \nEXAMPLES:\
            \n \
            \n  nc.py -t 192.168.0.1 -p 5555 -l -c\
            \n  nc.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe\
            \n  nc.py -t 192.168.0.1 -p 5555 -l -e='cat /etc/passwd'\
            \n  echo 'AABBCC' | nc.py -t 192.168.0.1 -p 5555 \
            \n \
            \nNOTE:\
            \n \
            " % (sys.argv[0]))

    sys.exit(1)


def client_sender(buffer):

    buffer = str.encode(buffer)
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:

        client.connect((target, int(port)))

        if len(buffer):
            client.send(buffer)

        while True:

            recv_len    = 1
            resp        = b""

            while recv_len:

                data = client.recv(4096)
                recv_len = len(data)
                resp += data

                if recv_len < 4096:
                    break

            print(resp.decode("utf-8"))

            buffer = input("")
            buffer += "\n"
            buffer = str.encode(buffer)

            client.send(buffer)

    except Exception as e:
        logging.error(traceback.format_exc())

        print("[*] Exception! Exiting")

        client.close()


def server_loop():

    global target

    if not len(target):
        target = "0.0.0.0"

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target, port))

    server.listen(5)

    while True:

        client_socket, addr = server.accept()

        client_threading = threading.Thread(target=client_handler, args=(client_socket,))
        client_threading.start()

def run_command(command):

    command = command.rstrip()

    try:

        output = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)

    except:

        output = "Failed to execute command\r\n"

    return output


def client_handler(client_socket):

    global upload
    global execute
    global command

    if len(upload_dest):

        file_buffer = ""

        while True:

            data = client_socket.recv(1024)

            if not data:
                
                break

            else:

                file_buffer += data


        try:

            file_desc = open (upload_dest, "wb")
            file_desc.write(file_buffer)
            file_desc.close()

            client_socket.send("Successfully saved file to %s\r\n" % upload_dest)

        except:

            client_socket.send("Failed to save file to %s\r\n" % upload_dest)

    if len(execute):

        output = run_command(execute)
        client_socket.send(output)

    if command:

        while True:

            client_socket.send(b"< nc.py #> ")

            cmd_buffer = b""
            while b"\n" not in cmd_buffer:

                cmd_buffer += client_socket.recv(1024)

            response = run_command(cmd_buffer)

            client_socket.send(response)

# -----------------------------------------------------------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------------------------------------------------------


def main (argv):

    global listen
    global port
    global execute
    global command
    global upload_dest
    global target

    if not len(argv):
        usage()

    try:

        opts, args = getopt.getopt(argv, "hle:t:p:cu:", ["help", "listen", "execute", "target", "port", "command", "upload"])

    except getopt.GetoptError as err:

        print("error: %s" % (str(err)))
        usage()

    for opt, arg in opts:

        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-l", "--listen"):
            listen = True
        elif opt in ("-e", "--execute"):
            execute = arg
        elif opt in ("-c", "--command"):
            command = True
        elif opt in ("-u", "--upload"):
            upload_dest = arg
        elif opt in ("-t", "--target"):
            target = arg
        elif opt in ("-p", "--port"):
            port = int(arg)
        else:
            assert False, "Unhandled Option"

    if not listen and len(target) and port > 0:

        buffer = sys.stdin.read()
        client_sender(buffer)

    if listen:

        server_loop()

if __name__ == "__main__":

    main(sys.argv[1:])
