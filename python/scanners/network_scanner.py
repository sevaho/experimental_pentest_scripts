#! /usr/bin/python

# -----------------------------------------------------------------------------------------------------------------------------
# GENERAL
# -----------------------------------------------------------------------------------------------------------------------------
#
# author: Sebastiaan Van Hoecke
# mail: sebastiaan@sevaho.io
#
# NOTE:
#
# -----------------------------------------------------------------------------------------------------------------------------

import sys
import socket
import os
import struct
import threading
import time

import netaddr
from ctypes import *
import ctypes

# -----------------------------------------------------------------------------------------------------------------------------
# GLOBAL VARIABLES
# -----------------------------------------------------------------------------------------------------------------------------


class IP (ctypes.Structure):
    _fields_ = [
           ("ihl",      ctypes.c_ubyte, 4),
           ("version",      ctypes.c_ubyte, 4),
           ("tos",      ctypes.c_ubyte),
           ("len",      ctypes.c_ushort),
           ("id",      ctypes.c_ushort),
           ("offset",      ctypes.c_ushort),
           ("ttl",      ctypes.c_ubyte),
           ("protocol_num",      ctypes.c_ubyte),
           ("sum",      ctypes.c_ushort),
           ("src",      ctypes.c_uint32),
           ("dst",      ctypes.c_uint32),
            ]

    def __new__ (self, socket_buffer=None):
        return self.from_buffer_copy(socket_buffer)

    def __init__ (self, socket_buffer=None):

        self.protocol_map = {1: 'ICMP', 6: 'TCP', 17: 'udp'}

        self.src_address = socket.inet_ntoa(struct.pack('<L', self.src))
        self.dst_address = socket.inet_ntoa(struct.pack('<L', self.dst))
        # self.src_address = self.src
        # self.dst_address = self.dst

        try:
            self.protocol = self.protocol_map[self.protocol_num]
        except Exception as e:
            self.protocol = str(self.protocol_num)


class ICMP (ctypes.Structure):

    _fields_ = [
           ("type",      ctypes.c_ubyte),
           ("code",      ctypes.c_ubyte),
           ("checksum",      ctypes.c_ushort),
           ("unused",      ctypes.c_ushort),
           ("next_hop_mtu",      ctypes.c_ushort),
            ]

    def __new__ (self, socket_buffer=None):
        return self.from_buffer_copy(socket_buffer)

    def __init__ (self, socket_buffer=None):
        pass


# -----------------------------------------------------------------------------------------------------------------------------
# FUNCTIONS
# -----------------------------------------------------------------------------------------------------------------------------


def usage ():

    print("Usage: %s [OPTIONS]... [ARGS]... \
            \n \
            \n  description\
            \n \
            \nOPTIONS:\
            \n \
            \n  -h, *       display the help and exit\
            \n \
            \nEXAMPLES:\
            \n \
            \nNOTE:\
            \n \
            " % (sys.argv[0]))

    sys.exit(1)

# -----------------------------------------------------------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------------------------------------------------------

###
# Dump information from TCP package
#
# =============> TCP Header <===============
#
#    0         7            15           23            31    OCTET
#    ---------------------------------------------------
#    |    Source Port        |    Destination Port     |        0
#    ---------------------------------------------------
#    |                Sequence Number                  |        4
#    ---------------------------------------------------
#    |            Acknowledgement Number               |        8
#    ---------------------------------------------------
#    |    Offset |U|A|P|R|S|F|       Window            |        12
#    ---------------------------------------------------
#    |    Check sum        |         Urgent Pointer    |        16
#    ---------------------------------------------------
#    |            Options and Padding                  |        20
#    ---------------------------------------------------
#
# Courtesy: http://ptgmedia.pearsoncmg.com/images/chap3_0672323516/elementLinks/03table01.gif
#
###
# Dump information from UDP package
#
# =============> UDP Header <===============
#
#    0         7            15           23            31    OCTET
#    ---------------------------------------------------
#    |    Source Port        |     estination Port     |        0
#    ---------------------------------------------------
#    |        Length         |        Checksum         |        4
#    ---------------------------------------------------
#    |                     Data                        |        8
#    ---------------------------------------------------
#
# Courtesy: http://en.wikipedia.org/wiki/User_Datagram_Protocol
####
# Retrieve the NAME (domain, typically) from the DNS packet
#
# ===========> Name Representation <=============
#
# For example, if the name is 'tech.meetrp.com'
# 	-----------------------------------
# 	|4|t|e|c|h|6|m|e|e|t|r|p|3|c|o|m|0|
# 	-----------------------------------
# Each name begins with a 1-byte count that specifies the
# number of bytes that follow. That name is terminated with
# a byte of 0. Each count byte must be in the range of 0 to
# 63.
#
# Courtesy: http://repo.hackerzvoice.net/depot_madchat/ebooks/TCP-IP_Illustrated/dns_the.htm
#
###
# Parse a DNS Response & cache the mapping for reverse mapping
#
# =============> DNS Header <===============
#
#    0         7            15           23            31    OCTET
#    ---------------------------------------------------
#    |    Identification    |         Flags            |        0
#    ---------------------------------------------------
#    |    No. of Questions  |    No. of Answers        |        4
#    ---------------------------------------------------
#    |    No. of Authority  |     No. of Additional    |        8
#    ---------------------------------------------------
#    |                    Questions                    |    variable size
#    ---------------------------------------------------
#    |                    Answers                      |    variable size
#    ---------------------------------------------------
#    |                    Authority                    |    variable size
#    ---------------------------------------------------
#    |                Additional Info                  |    variable size
#    ---------------------------------------------------
#
# Courtesy:
#	http://repo.hackerzvoice.net/depot_madchat/ebooks/TCP-IP_Illustrated/dns_the.htm
#	http://www.firewall.cx/networking-topics/protocols/domain-name-system-dns/161-protocols-dns-response.html
#
###
# Dump information from IPv4 package
#
# =============> IPv4 Header <===============
#
#    0     3     7              15          23            31    OCTET
#    ------------------------------------------------------
#    | Ver | Hdr |    Type of    |        Total           |        0
#    |     | Len |    Service    |        Length          |
#    ------------------------------------------------------
#    |    Identification         | Flags |    Offset      |        4
#    ------------------------------------------------------
#    |    TTL    |    Protocol   |         CheckSum       |        8
#    ------------------------------------------------------
#    |                    Source Address                  |        12
#    ------------------------------------------------------
#    |                Destination Address                 |        16
#    ------------------------------------------------------
#    |            IP Options                |    Padding  |        20
#    ------------------------------------------------------
#    |                     Data                           |        24
#    ------------------------------------------------------
#    |                    More Data                       |        28
#    -------------------------------------------------------
#
# Courtesy: http://www.yaldex.com/tcp_ip/FILES/04fig03.gif
#
###
# Dump information from IPv6 package
#
# =============> IPv6 Header <===============
#
#    0     3     7            15            23             31    OCTET
#    ------------------------------------------------------
#    | VER |    Class    |            Flow Label          |        0
#    ------------------------------------------------------
#    |     Payload Length     | Protocol |   Hop Limit    |        4
#    ------------------------------------------------------
#    |                Source Address                      |        8
#    ------------------------------------------------------
#    |                Source Address (cont)               |        12
#    ------------------------------------------------------
#    |                Source Address (cont)               |        16
#    ------------------------------------------------------
#    |                Source Address (cont)               |        20
#    ------------------------------------------------------
#    |            Destination Address                     |        24
#    ------------------------------------------------------
#    |            Destination Address (cont)              |        28
#    ------------------------------------------------------
#    |            Destination Address (cont)              |        32
#    ------------------------------------------------------
#    |            Destination Address (cont)              |        36
#    ------------------------------------------------------
#
# Courtesy: http://www.tutorialspoint.com/ipv6/images/IPv6_header.jpg
####
# Dump information from ARP package
#
# =============> ARP Header <===============
#
#    0         7            15                         31     OCTET
#    ---------------------------------------------------
#    |    Hardware Type     |        Protocol Type     |        0
#    ---------------------------------------------------
#    | H/w Len |  Proto Len |            OpCode        |        4
#    ---------------------------------------------------
#    |            Source MAC Address                   |        8
#    ---------------------------------------------------
#    |         Source Protocol Address                 |        12
#    ---------------------------------------------------
#    |        Destination MAC Address                  |        16
#    ---------------------------------------------------
#    |        Destination Protocol Address             |        20
#    ---------------------------------------------------
#
# Courtesy: https://reaper81.files.wordpress.com/2010/07/arp-header1.png
#

def udp_sender (subnet, magic):

    time.sleep(5)
    sender = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    for ip in netaddr.IPNetwork(subnet):

        if str(ip) == '192.168.0.255':
            print('')
        else:
            try:
                # print(ip)
                sender.sendto(str.encode(magic), (str(ip), 65212))
            except Exception as e:
                print(e)

def main (argv):

    host = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]

    host = "192.168.0.165"
    subnet = "192.168.0.0/24"
    magic_message = "TESTJE"


    sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
    # sniffer = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))

    # s.bind((net_iface_dev, 0))

    # sniffer.bind(('wlp4s0', 0))
    sniffer.bind((host, 0))

    sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)

    t = threading.Thread(target=udp_sender, args=(subnet, magic_message))
    t.start()

    while True:

        local_buffer = sniffer.recvfrom(65565)[0]
        ip_header = IP(local_buffer[0:20])

        # print('Protocol: %s %s -> %s' % (ip_header.protocol, ip_header.src_address, ip_header.dst_address))

        offset = ip_header.ihl * 4

        buf = local_buffer[offset:offset + ctypes.sizeof(ICMP)]
        icmp_header = ICMP(buf)

        # print('ICMP -> TYPE: %d CODE: %d' % (icmp_header.type, icmp_header.code))

        if icmp_header.code == 3 and icmp_header.type == 3:

            print("HOST UP: %s", ip_header.src_address)
            if netaddr.IPAddress(ip_header.src_address) in netaddr.IPNetwork(subnet):

                if local_buffer[len(local_buffer)-len(magic_message):] == magic_message:

                    print("HOST UP: %s", ip_header.src_address)

        # if len(local_buffer):
        #
        #     print(local_buffer)

    # print(sniffer.recvfrom(65565))
    # print(sniffer.recvfrom(4096))

if __name__ == "__main__":

    main(sys.argv[1:])
