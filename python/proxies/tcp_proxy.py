#! /usr/bin/python

# -----------------------------------------------------------------------------------------------------------------------------
# GENERAL
# -----------------------------------------------------------------------------------------------------------------------------
#
# author: Sebastiaan Van Hoecke
# mail: sebastiaan@sevaho.io
#
# NOTE:
#
# -----------------------------------------------------------------------------------------------------------------------------

import sys
import socket
import threading
import logging
import traceback

# -----------------------------------------------------------------------------------------------------------------------------
# GLOBAL VARIABLES
# -----------------------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------------------------------------------------
# FUNCTIONS
# -----------------------------------------------------------------------------------------------------------------------------


def usage ():

    print("Usage: %s [OPTIONS]... [ARGS]... \
            \n \
            \n  description\
            \n \
            \nOPTIONS:\
            \n \
            \n  -h, *       display the help and exit\
            \n \
            \nEXAMPLES:\
            \n \
            \n  tcpproxy.py 127.0.0.1 9000 10.12.13.14 9000 True\
            \n \
            \nNOTE:\
            \n \
            " % (sys.argv[0]))

    sys.exit(1)


def hexdump(src, length=8):
    src = str(src)
    result = []
    digits = 2
    for i in range(0, len(src), length):
        s = src[i:i + length]
        hexa = ' '.join(["%0*X" % (digits, ord(x)) for x in s])
        text = ''.join([x if 0x20 <= ord(x) < 0x7F else '.' for x in s])
        result.append("%04X   %-*s   %s" % (i, length * (digits + 1), hexa, text))
    return '\n'.join(result)


def receive_from (connection):

    buffer = ""

    connection.settimeout(1)

    try:
        while True:
            data = connection.recv(4096)

            if not data:

                break

            buffer += str(data)

    except Exception as e:
        logging.error(traceback.format_exc())

        print("[*] Exception! Exiting")

        pass

    return buffer


def request_handler (buffer):

    return buffer


def response_handler (buffer):

    return buffer


def proxy_handler (client_socket, remote_host, remote_port, receive_first):

    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, int(remote_port)))

    if receive_first:

        remote_buffer = receive_from(remote_socket)
        print(hexdump(remote_buffer))

        remote_buffer = response_handler(remote_buffer)

        if len(remote_buffer):

            print("[<==] Sending %d bytes to localhost" % (len(remote_buffer)))
            remote_buffer = str.encode(remote_buffer)
            client_socket.send(remote_buffer)

    while True:

        local_buffer = receive_from(client_socket)

        if len(local_buffer):

            print("[==>] Received %d bytes from localhost" % (len(local_buffer)))
            print(hexdump(str.encode(local_buffer)))

            local_buffer = request_handler(local_buffer)

            local_buffer = str.encode(local_buffer)
            remote_socket.send(local_buffer)
            print("[====>] Send to remote" % ())

        remote_buffer = receive_from(remote_socket)

        if len(remote_buffer):

            print("[<====] Received %d bytes from remote" % (len(remote_buffer)))

            print(hexdump(remote_buffer))
            remote_buffer = response_handler(remote_buffer)

            remote_buffer = str.encode(remote_buffer)
            client_socket.send(remote_buffer)

            print("[<==] Send to localhost" % ())

        if not len(local_buffer) or not len(remote_buffer):

            client_socket.close()
            remote_socket.close()

            break


def server_loop (local_host, local_port, remote_host, remote_port, receive_first):

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    server.bind((local_host, int(local_port)))

    server.listen(5)

    while True:

        client_socket, addr = server.accept()

        print("Received connection from %s:%d" % (addr[0], addr[1]))

        proxy_thread = threading.Thread(target=proxy_handler, args=(client_socket, remote_host, remote_port, receive_first))
        proxy_thread.start()

# -----------------------------------------------------------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------------------------------------------------------


def main (argv):

    # atleast 1 argument required
    if not len(argv):
        usage()

    local_host = argv[0]
    local_port = argv[1]
    remote_host = argv[2]
    remote_port = argv[3]
    receive_first = argv[4]

    if "True" in receive_first:
        receive_first = True
    else:
        receive_first = False


    server_loop(local_host, local_port, remote_host, remote_port, receive_first)
if __name__ == "__main__":

    main(sys.argv[1:])
