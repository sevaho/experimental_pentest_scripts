#! /usr/bin/python

# -----------------------------------------------------------------------------------------------------------------------------
# GENERAL
# -----------------------------------------------------------------------------------------------------------------------------
#
# author: Sebastiaan Van Hoecke
# mail: sebastiaan@sevaho.io
#
# NOTE:
#
# -----------------------------------------------------------------------------------------------------------------------------

import sys
import getopt
import socket
import paramiko
import threading

# -----------------------------------------------------------------------------------------------------------------------------
# GLOBAL VARIABLES
# -----------------------------------------------------------------------------------------------------------------------------

host_key = paramiko.RSAKey(filename='test_RSA.key')


class Server(paramiko.ServerInterface):

    def _init_ (self):

        self.event = threading.Event()

    def check_channel_request (self, kind, chanid):

        if kind == 'session':

            return paramiko.OPEN_SUCCEEDED

        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def check_auth_password (self, username, password):

        if (username == 'justin') and (password == 'test'):

            return paramiko.AUTH_SUCCESSFUL

        return paramiko.AUTH_FAILED


server = sys.argv[1]
ssh_port = int(sys.argv[2])

try:

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((server, ssh_port))
    sock.listen(100)

    print('[+] Listening for connection...')

    client, addr = sock.accept()

except Exception as e:

    print(e)
    sys.exit(1)

print('[+] Got a connection!')

try:

    session = paramiko.Transport(client)
    session.add_server_key(host_key)
    server = Server()

    try:
        session.start_server(server=server)
    except Exception as e:
        print('[-] SSH negotiation failed')

    chan = session.accept(20)

    print('[+] Authenticated!')
    print(chan.recv(1024))

    chan.send('Welcome to ssh')

    while True:
        try:
            command = input("Enter command: ").strip('\n')

            if command != 'exit':

                chan.send(command)
                print(chan.recv(1024) + '\n')

            else:

                chan.send('exit')
                print('exitiing')
                session.close()
                raise Exception('exit')
        except Exception as e:
            session.close()

except Exception as e:

    print(e)
    try:
        session.close()
    except Exception as e:
        pass
    sys.exit(1)

# -----------------------------------------------------------------------------------------------------------------------------
# FUNCTIONS
# -----------------------------------------------------------------------------------------------------------------------------


def usage ():

    print("Usage: %s [OPTIONS]... [ARGS]... \
            \n \
            \n  description\
            \n \
            \nOPTIONS:\
            \n \
            \n  -h, *       display the help and exit\
            \n \
            \nEXAMPLES:\
            \n \
            \nNOTE:\
            \n \
            " % (sys.argv[0]))

    sys.exit(1)

# -----------------------------------------------------------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------------------------------------------------------


def main (argv):

    global var

    # atleast 1 argument required
    if not len(argv):
        usage()

    try:

        opts, args = getopt.getopt(argv, "ha:", ["help"])

    except getopt.GetoptError as err:

        print("error: %s" % (str(err)))
        usage()

    for opt, arg in opts:

        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-a", "--arg1"):
            print(arg)
        else:
            assert False, "Unhandled Option"


if __name__ == "__main__":

    main(sys.argv[1:])
